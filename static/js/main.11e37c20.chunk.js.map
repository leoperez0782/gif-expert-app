{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","placeholder","getGifs","category","a","url","encodeURI","fetch","resp","json","data","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,cACzB,EAAqCC,mBAAS,IAA9C,mBAAQC,EAAR,KAAoBC,EAApB,KAaA,OACI,sBAAMC,SATW,SAACC,GAClBA,EAAEC,iBACCJ,EAAWK,OAAOC,OAAQ,IACzBR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACtCN,EAAc,MAKlB,SACI,uBACIO,KAAK,OACLC,MAAQT,EACRU,SAjBc,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,QAiBfG,YAAY,4B,+BCrBdC,EAAO,uCAAG,WAAOC,GAAP,qBAAAC,EAAA,6DACdC,EADc,iDACkCC,UAAWH,GAD7C,+DAEDI,MAAMF,GAFL,cAEdG,EAFc,gBAGGA,EAAKC,OAHR,uBAGZC,EAHY,EAGZA,KAHY,kBAKbA,EAAKC,KAAI,SAAAC,GAAQ,IAAD,EACnB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXT,IAAG,UAAEO,EAAIG,cAAN,aAAE,EAAYC,iBAAiBX,SATtB,2CAAH,sDCARY,EAAc,SAAC,GAAqB,EAApBJ,GAAqB,IAAjBC,EAAgB,EAAhBA,MAAOT,EAAS,EAATA,IACpC,OACI,sBAAKa,UAAU,uBAAf,UACI,qBAAKC,IAAKd,EAAKe,IAAKN,IACpB,4BAAIA,QCDHO,EAAU,SAAC,GAAkB,IAAhBlB,EAAe,EAAfA,SAGtB,ECLwB,SAAEA,GAC1B,MAA0Bf,mBAAS,CAC/BsB,KAAM,GACNY,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAcA,OATAC,qBAAU,WACNvB,EAASC,GACRuB,MAAM,SAAAC,GACHH,EAAS,CACLd,KAAMiB,EACNL,SAAS,UAIdC,EDV2BK,CAAazB,GAAjCY,EAAd,EAAQL,KAAcY,EAAtB,EAAsBA,QAGtB,OACI,qCACI,oBAAIJ,UAAY,sDAAhB,SAAuEf,IACtEmB,GAAW,mBAAGJ,UAAY,iBAAf,wBACZ,qBAAKA,UAAU,YAAf,SAEQH,EAAOJ,KAAI,SAAAC,GAAG,OAAI,cAAC,EAAD,eAEVA,GADCA,EAAIC,aEdpBgB,EAAe,WAGxB,MAAoCzC,mBAAS,IAA7C,mBAAO0C,EAAP,KAAmB3C,EAAnB,KAEA,OACA,qCACI,8CAEA,cAAC,EAAD,CAAaA,cAAiBA,IAC9B,uBAEA,6BACK2C,EAAWnB,KAAI,SAAAR,GAAQ,OAAI,cAAC,EAAD,CAAwBA,SAAUA,GAApBA,Y,YCZtD4B,IAASC,OAEL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.11e37c20.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\nimport PropTypes from 'prop-types'\r\n\r\nexport const AddCategory = ({setCategories}) =>{\r\n    const  [inputValue, setInputValue] = useState('');\r\n    const handleInputChange = (e) =>{\r\n        setInputValue(e.target.value);\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        if(inputValue.trim().length >2){\r\n            setCategories(cats => [inputValue, ...cats ]);\r\n            setInputValue('');\r\n        }\r\n        \r\n    }\r\n    return (\r\n        <form onSubmit ={handleSubmit}>\r\n            <input \r\n                type=\"text\"\r\n                value ={inputValue}\r\n                onChange ={handleInputChange}\r\n                placeholder='Buscar gifs sobre...'\r\n                />\r\n        </form>\r\n    );\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}","\r\n\r\nexport  const getGifs = async (category) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI( category )}&limit=10&api_key=9fVd7tOzWx7CGywTgHqAJbW0mwHWtCPQ`;\r\n    const resp = await fetch(url);\r\n    const { data } = await resp.json();\r\n\r\n    return data.map(img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    })\r\n    \r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ({id, title, url}) => {\r\n    return (\r\n        <div className='card animate__zoomIn'>\r\n            <img src={url} alt={title}/>\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GifGridItem } from '../components/GifGridItem';\r\n\r\n\r\nexport const GifGrid = ({ category }) => {\r\n\r\n\r\n    const { data: images, loading } = useFetchGifs(category);\r\n\r\n\r\n    return (\r\n        <>\r\n            <h3 className = 'animate__animated animate__bounce animate__repeat-2'>{category}</h3>\r\n            {loading && <p className = 'animate__flash'>Loading...</p>}\r\n            <div className='card-grid'>\r\n                {\r\n                    images.map(img => <GifGridItem\r\n                        key={img.id}\r\n                        {...img} />)\r\n                }\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n","import { useState, useEffect } from \"react\";\r\nimport {getGifs} from '../helpers/getGifs';\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect(() =>{\r\n        getGifs( category )\r\n        .then( imgs => {\r\n            setState({\r\n                data: imgs,\r\n                loading: false\r\n            })\r\n        })\r\n    });\r\n    return state;\r\n}\r\n\r\n\r\n\r\n","import React, {useState} from 'react';\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nexport const GifExpertApp = () =>{\r\n\r\n   \r\n    const [categories, setCategories] = useState([]);\r\n    \r\n    return (\r\n    <>\r\n        <h2>GifExpertApp</h2>\r\n        \r\n        <AddCategory setCategories = {setCategories}/>\r\n        <hr></hr>\r\n        \r\n        <ol>\r\n            {categories.map(category => <GifGrid key={category} category={category}/>)}\r\n        </ol>\r\n    </>\r\n    );\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {GifExpertApp} from './GifExpertApp';\nimport 'animate.css';\nimport './index.css';\nReactDOM.render(\n  \n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}